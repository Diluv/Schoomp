plugins {
    id "java"
    id "signing"
    id "maven-publish"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

version = "${project_version}" + (isSnapshot() ? "+" + getBuildNumber() : "")
description = "Schoomp is a Java library for building and sending webhook requests to Discord"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation group: "com.google.code.findbugs", name: "jsr305", version: "3.0.2"
    implementation group: "com.google.code.gson", name: "gson", version: "2.10.1"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    description = "Creates a JAR containing the source code."
    from sourceSets.main.allSource
    archiveClassifier = "sources"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = "Creates a JAR containing the JavaDocs."
    from javadoc.destinationDir
    archiveClassifier = "javadoc"
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jar {
    manifest {
        attributes([
                "Timestamp"               : System.currentTimeMillis(),
                "Specification-Title"     : project.archivesBaseName,
                "Specification-Vendor"    : project.vendor,
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.archivesBaseName,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : project.vendor,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java"           : "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
        ])
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    ext."signing.gnupg.keyName" = "A35B3CEC"
}

signing {
    required { !isSnapshot() }
    useGpgCmd()
    sign(publishing.publications)
}

tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
  shouldRunAfter(tasks.withType(Sign))
}

nexusPublishing {
    packageGroup = "com.diluv"
    repositories {
        sonatype {
            stagingProfileId = "1282c5e0d73bd2"
            username = System.getenv("OSSRH_USERNAME")
            password = System.getenv("OSSRH_PASSWORD")
        }
    }

    transitionCheckOptions {
        maxRetries.set(40)
        delayBetween.set(java.time.Duration.ofMillis(5000))
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            group = project.group
            artifactId = project.name
            version = project.version

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = project.name
                description = project.description
                url = "https://github.com/Diluv/Schoomp"

                scm {
                    connection = "scm:git:git://github.com/Diluv/Schoomp.git"
                    developerConnection = "scm:git:ssh://github.com/Diluv/Schoomp.git"
                    url = "https://github.com/Diluv/Schoomp"
                }

                licenses {
                    license {
                        name = "GNU Lesser General Public License v2.1"
                        url = "https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html"
                    }
                }

                developers {
                    developer {
                        id = "lclc98"
                        name = "lclc98"
                        email = "lclc98@lclc98.com"
                    }
                }
            }
        }
    }
}

static String getBuildNumber() {
    return System.getenv("GITHUB_RUN_NUMBER") ?: "0"
}

static boolean isSnapshot() {
    String ref = System.getenv("GITHUB_REF");
    if (ref != null && ref.startsWith("refs/tags/v")) {
        return false
    }
    return true
}